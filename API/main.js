const express = require('express');
const { Pool } = require('pg');
const Redis = require('ioredis');
const cors = require('cors');
const multer = require("multer");
const xlsx = require("xlsx");
const os = require('os');

const app = express();
const port = 3000;
const upload = multer({ dest: "uploads/" });

// Configura√ß√£o do PostgreSQL
const pool = new Pool({
    user: process.env.PG_USER,
    host: process.env.PG_HOST,
    database: process.env.PG_DATABASE,
    password: process.env.PG_PASSWORD,
    port: process.env.PG_PORT,
});

// Configura√ß√£o do Redis com autentica√ß√£o
const redis = new Redis({
    host: process.env.REDIS_HOST || '127.0.0.1',
    port: process.env.REDIS_PORT || 6379,
    retryStrategy: (times) => Math.min(times * 50, 2000)
});

const CACHE_EXPIRATION = 3600; // Cache por 1 hora

function getLocalIP() {
    const interfaces = os.networkInterfaces();
    for (const name of Object.keys(interfaces)) {
        for (const iface of interfaces[name]) {
            if (iface.family === 'IPv4' && !iface.internal) {
                return iface.address;
            }
        }
    }
    return 'IP n√£o encontrado';
}

app.use(cors());
app.use(express.json());

// üìå ROTA: Buscar Produto por SKU
app.get('/api/produtos/:sku', async (req, res) => {
    const { sku } = req.params;
    const cacheKey = `produto:${sku}`;

    try {
        const cachedData = await redis.get(cacheKey);
        if (cachedData) {
            console.log(`Cache hit para SKU: ${sku}`);
            return res.json(JSON.parse(cachedData));
        }

        console.log(`Cache miss para SKU: ${sku}, consultando o banco...`);
        const result = await pool.query(
            `SELECT 
                "PRE√áO MARGEM MINIMA RAIA" as lprice,  
                "IC NOVO SITE/LOJA RAIA PONDERADO" as ic, 
                "RBV L1M" as rbv, 
                "PANVEL" AS panvel, 
                "DT INICIO OFERTA RAIA" AS dtInicio, 
                "DT FIM OFERTA RAIA" AS dtFim 
             FROM "produtos" 
             WHERE "PRODUTO" = $1`, 
            [sku]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Produto n√£o encontrado' });
        }

        const produto = result.rows[0];

        await redis.setex(cacheKey, CACHE_EXPIRATION, JSON.stringify(produto));

        return res.json(produto);
    } catch (error) {
        console.error('Erro ao acessar o banco de dados:', error);
        res.status(500).send('Erro ao acessar o banco de dados');
    }
});

app.post("/api/upload/produtos", upload.single("file"), async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ error: "Nenhum arquivo enviado" });
      }
  
      const workbook = xlsx.readFile(req.file.path);
      const sheetName = workbook.SheetNames[0];
      const data = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName]);
  
      const insertQuery = `
        INSERT INTO public.produtos("UF", "PRODUTO", "DESCRI√á√ÉO", "GRUPO", "Departamento SITE", "MASTER", 
        "CATEGORIA SITE", "CATEGORIA", "SUB CATEGORIA", "FORNECEDOR", "FL INATIVO", "REMARCA√á√ÉO", "COMERCIALIZA√á√ÉO", 
        "QT ESTOQUE", "NOTABILIDADE", "PRE√áO DE RAIA BAIXA", "PRE√áO DE DSIL BAIXA", "PRE√áO DE RAIA M√âDIA", "PRE√áO DE DSIL M√âDIA", 
        "PRE√áO DE RAIA ALTA", "PRE√áO DE DSIL ALTA", "PRE√áO POR RAIA BAIXA", "PRE√áO POR DSIL BAIXA", "PRE√áO POR RAIA M√âDIA", 
        "PRE√áO POR DSIL M√âDIA", "PRE√áO POR RAIA ALTA", "PRE√áO POR DSIL ALTA", "MENOR PRE√áO RAIA", "MENOR PRE√áO DSIL", 
        "PRE√áO DE RAIA ECOMM", "PRE√áO DE DSIL ECOMM", "PRE√áO POR RAIA ECOMM", "DT INICIO OFERTA RAIA", "DT FIM OFERTA RAIA", 
        "PRE√áO POR DSIL ECOMM", "DT INICIO OFERTA DSIL", "DT FIM OFERTA DSIL", "MENOR PRE√áO RAIA ECOMM", "MENOR PRE√áO DSIL ECOMM", 
        "PANVEL", "ULTRAFARMA", "EXTRAFARMA", "DROGARIAVENANCIO", "MAGAZINELUIZA", "ARAUJO", "EPOCACOSMETICOS", "AMAZON", 
        "DROGARIASPACHECO", "PAGUEMENOS", "FARMACIASNISSEI", "DROGARIASAOPAULO", "BELEZANAWEB", "REGRA CONCORR√äNCIA RAIA", 
        "REGRA CONCORR√äNCIA DSIL", "NOME COMPETIDOR RAIA", "NOME COMPETIDOR DSIL", "CUSTO MEDIO", "ALIQUOTA MEDIA", 
        "ORIGEM DO CUSTO", "MG M√çN RAIA", "POSICIONAMENTO RAIA", "MG M√çN DSIL", "POSICIONAMENTO DSIL", "PRE√áO MARGEM MINIMA RAIA", 
        "PRE√áO CONCORRENCIA RAIA", "PRE√áO MAXIMO RAIA", "PRE√áO MARGEM MINIMA DSIL", "PRE√áO CONCORRENCIA DSIL", "PRE√áO MAXIMO DSIL",
        "PRE√áO SEGUIR RAIA", "PRE√áO SEGUIR DSIL", "STATUS DE PRE√áO RAIA", "STATUS DE PRE√áO DSIL", "CLASSIFICACAO ELASTICIDADE", 
        "PRE√áO MAGICO RAIA", "PRE√áO MAGICO DSIL", "EXCE√á√ÉO", "EXCE√á√ÉO REMARCA√á√ÉO", "√â OFERTA ECOMM RAIA?", "√â OFERTA ECOMM DSIL?",
        "LMPM RAIA", "DT INICIO LMPM RAIA", "DT FIM LMPM RAIA", "LMPM MENOR QUE POR RAIA?", "LMPM DSIL", "DT INICIO LMPM DSIL", 
        "DT FIM LMPM DSIL", "LMPM MENOR QUE POR DSIL?", "VEREDITO RAIA", "VEREDITO DSIL", "O QUE FAZER RAIA", "O QUE FAZER DSIL", 
        "BANNER", "DERMACLUB", "PMC", "COMBO", "PRE√áO SEMI-FINAL RAIA", "PRE√áO SEMI-FINAL DSIL", "COMBO MENSAL", "TRATATIVAS RAIA", 
        "TRATATIVAS DSIL", "PRE√áO FINAL RAIA", "PRE√áO FINAL DSIL", "PRE√áO POR BLACK", "TRAVA DE DIFEREN√áA RAIA", 
        "TRAVA DE DIFEREN√áA DSIL", "CODIGO OFERTA RAIA", "CODIGO OFERTA DSIL", "RELATIVIDADE RAIA/DSIL", 
        "TRAVA DIFEREN√áA ENTRE BANDEIRAS", "VARIA√á√ÉO DE PRE√áO RAIA", "VARIA√á√ÉO DE PRE√áO DSIL", "IC ATUAL RAIA/CONCORRENTE", 
        "IC NOVO RAIA/CONCORRENTE", "IC ATUAL DSIL/CONCORRENTE", "IC NOVO DSIL/CONCORRENTE", "LB ATUAL RAIA", "LB % ATUAL RAIA", 
        "LB NOVO RAIA", "LB % NOVO RAIA", "LB ATUAL DSIL", "LB % ATUAL DSIL", "LB NOVO DSIL", "LB % NOVO DSIL", 
        "IC ATUAL SITE/LOJA RAIA", "IC NOVO SITE/LOJA RAIA", "IC ATUAL SITE/LOJA DSIL", "IC NOVO SITE/LOJA DSIL", 
        "QT UNIDADE VENDIDA L1M", "RBV L1M", "OUTLIER IC", "RBV L1M POND", "IC ATUAL RAIA/CONCORRENTE POND", 
        "IC NOVO RAIA/CONCORRENTE POND", "IC ATUAL DSIL/CONCORRENTE POND", "IC NOVO DSIL/CONCORRENTE POND", 
        "LB % ATUAL RAIA PONDERADO", "LB % NOVO RAIA PONDERADO", "LB % ATUAL DSIL PONDERADO", "LB % NOVO DSIL PONDERADO", 
        "IC ATUAL SITE/LOJA RAIA PONDERADO", "IC NOVO SITE/LOJA RAIA PONDERADO", "IC ATUAL SITE/LOJA DSIL PONDERADO", 
        "IC NOVO SITE/LOJA DSIL PONDERADO", "VARIA√á√ÉO RAIA PONDERADO", "VARIA√á√ÉO DSIL PONDERADO")
        VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, 
          $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, 
          $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, 
          $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, 
          $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95, $96, $97, $98, $99, $100, $101, $102,
          $103, $104, $105, $106, $107, $108, $109, $110, $111, $112, $113, $114, $115, $116, $117, $118, $119, 
          $120, $121, $122, $123, $124, $125, $126, $127, $128, $129, $130, $131, $132, $133, $134, $135, $136, 
          $137, $138, $139, $140, $141, $142, $143, $144, $145, $146)
      `;
      
      const updateQuery = `
        UPDATE public.produtos SET
          "UF" = $1, "PRODUTO" = $2, "DESCRI√á√ÉO" = $3, "GRUPO" = $4, "Departamento SITE" = $5, "MASTER" = $6,
          "CATEGORIA SITE" = $7, "CATEGORIA" = $8, "SUB CATEGORIA" = $9, "FORNECEDOR" = $10, "FL INATIVO" = $11,
          "REMARCA√á√ÉO" = $12, "COMERCIALIZA√á√ÉO" = $13, "QT ESTOQUE" = $14, "NOTABILIDADE" = $15, "PRE√áO DE RAIA BAIXA" = $16,
          "PRE√áO DE DSIL BAIXA" = $17, "PRE√áO DE RAIA M√âDIA" = $18, "PRE√áO DE DSIL M√âDIA" = $19, "PRE√áO DE RAIA ALTA" = $20,
          "PRE√áO DE DSIL ALTA" = $21, "PRE√áO POR RAIA BAIXA" = $22, "PRE√áO POR DSIL BAIXA" = $23, "PRE√áO POR RAIA M√âDIA" = $24,
          "PRE√áO POR DSIL M√âDIA" = $25, "PRE√áO POR RAIA ALTA" = $26, "PRE√áO POR DSIL ALTA" = $27, "MENOR PRE√áO RAIA" = $28,
          "MENOR PRE√áO DSIL" = $29, "PRE√áO DE RAIA ECOMM" = $30, "PRE√áO DE DSIL ECOMM" = $31, "PRE√áO POR RAIA ECOMM" = $32,
          "DT INICIO OFERTA RAIA" = $33, "DT FIM OFERTA RAIA" = $34, "PRE√áO POR DSIL ECOMM" = $35, "DT INICIO OFERTA DSIL" = $36,
          "DT FIM OFERTA DSIL" = $37, "MENOR PRE√áO RAIA ECOMM" = $38, "MENOR PRE√áO DSIL ECOMM" = $39, "PANVEL" = $40,
          "ULTRAFARMA" = $41, "EXTRAFARMA" = $42, "DROGARIAVENANCIO" = $43, "MAGAZINELUIZA" = $44, "ARAUJO" = $45,
          "EPOCACOSMETICOS" = $46, "AMAZON" = $47, "DROGARIASPACHECO" = $48, "PAGUEMENOS" = $49, "FARMACIASNISSEI" = $50,
          "DROGARIASAOPAULO" = $51, "BELEZANAWEB" = $52, "REGRA CONCORR√äNCIA RAIA" = $53, "REGRA CONCORR√äNCIA DSIL" = $54,
          "NOME COMPETIDOR RAIA" = $55, "NOME COMPETIDOR DSIL" = $56, "CUSTO MEDIO" = $57, "ALIQUOTA MEDIA" = $58,
          "ORIGEM DO CUSTO" = $59, "MG M√çN RAIA" = $60, "POSICIONAMENTO RAIA" = $61, "MG M√çN DSIL" = $62, "POSICIONAMENTO DSIL" = $63,
          "PRE√áO MARGEM MINIMA RAIA" = $64, "PRE√áO CONCORRENCIA RAIA" = $65, "PRE√áO MAXIMO RAIA" = $66, "PRE√áO MARGEM MINIMA DSIL" = $67,
          "PRE√áO CONCORRENCIA DSIL" = $68, "PRE√áO MAXIMO DSIL" = $69, "PRE√áO SEGUIR RAIA" = $70, "PRE√áO SEGUIR DSIL" = $71,
          "STATUS DE PRE√áO RAIA" = $72, "STATUS DE PRE√áO DSIL" = $73, "CLASSIFICACAO ELASTICIDADE" = $74, "PRE√áO MAGICO RAIA" = $75,
          "PRE√áO MAGICO DSIL" = $76, "EXCE√á√ÉO" = $77, "EXCE√á√ÉO REMARCA√á√ÉO" = $78, "√â OFERTA ECOMM RAIA?" = $79, "√â OFERTA ECOMM DSIL?" = $80,
          "LMPM RAIA" = $81, "DT INICIO LMPM RAIA" = $82, "DT FIM LMPM RAIA" = $83, "LMPM MENOR QUE POR RAIA?" = $84, "LMPM DSIL" = $85,
          "DT INICIO LMPM DSIL" = $86, "DT FIM LMPM DSIL" = $87, "LMPM MENOR QUE POR DSIL?" = $88, "VEREDITO RAIA" = $89,
          "VEREDITO DSIL" = $90, "O QUE FAZER RAIA" = $91, "O QUE FAZER DSIL" = $92, "BANNER" = $93, "DERMACLUB" = $94,
          "PMC" = $95, "COMBO" = $96, "PRE√áO SEMI-FINAL RAIA" = $97, "PRE√áO SEMI-FINAL DSIL" = $98, "COMBO MENSAL" = $99,
          "TRATATIVAS RAIA" = $100, "TRATATIVAS DSIL" = $101, "PRE√áO FINAL RAIA" = $102, "PRE√áO FINAL DSIL" = $103,
          "PRE√áO POR BLACK" = $104, "TRAVA DE DIFEREN√áA RAIA" = $105, "TRAVA DE DIFEREN√áA DSIL" = $106, "CODIGO OFERTA RAIA" = $107,
          "CODIGO OFERTA DSIL" = $108, "RELATIVIDADE RAIA/DSIL" = $109, "TRAVA DIFEREN√áA ENTRE BANDEIRAS" = $110, "VARIA√á√ÉO DE PRE√áO RAIA" = $111,
          "VARIA√á√ÉO DE PRE√áO DSIL" = $112, "IC ATUAL RAIA/CONCORRENTE" = $113, "IC NOVO RAIA/CONCORRENTE" = $114,
          "IC ATUAL DSIL/CONCORRENTE" = $115, "IC NOVO DSIL/CONCORRENTE" = $116, "LB ATUAL RAIA" = $117, "LB % ATUAL RAIA" = $118,
          "LB NOVO RAIA" = $119, "LB % NOVO RAIA" = $120, "LB ATUAL DSIL" = $121, "LB % ATUAL DSIL" = $122, "LB NOVO DSIL" = $123,
          "LB % NOVO DSIL" = $124, "IC ATUAL SITE/LOJA RAIA" = $125, "IC NOVO SITE/LOJA RAIA" = $126, "IC ATUAL SITE/LOJA DSIL" = $127,
          "IC NOVO SITE/LOJA DSIL" = $128, "QT UNIDADE VENDIDA L1M" = $129, "RBV L1M" = $130, "OUTLIER IC" = $131, "RBV L1M POND" = $132,
          "IC ATUAL RAIA/CONCORRENTE POND" = $133, "IC NOVO RAIA/CONCORRENTE POND" = $134, "IC ATUAL DSIL/CONCORRENTE POND" = $135,
          "IC NOVO DSIL/CONCORRENTE POND" = $136, "LB % ATUAL RAIA PONDERADO" = $137, "LB % NOVO RAIA PONDERADO" = $138,
          "LB % ATUAL DSIL PONDERADO" = $139, "LB % NOVO DSIL PONDERADO" = $140, "IC ATUAL SITE/LOJA RAIA PONDERADO" = $141,
          "IC NOVO SITE/LOJA RAIA PONDERADO" = $142, "IC ATUAL SITE/LOJA DSIL PONDERADO" = $143, "IC NOVO SITE/LOJA DSIL PONDERADO" = $144,
          "VARIA√á√ÉO RAIA PONDERADO" = $145, "VARIA√á√ÉO DSIL PONDERADO" = $146
        WHERE "PRODUTO" = $2;
      `;

      // Insert cada linha de dados de produtos
      for (const row of data) {
        const values = Object.values(row);
        
        // Verifica se o produto j√° existe na base (por exemplo, se "PRODUTO" √© √∫nico)
        const result = await pool.query(`SELECT * FROM public.produtos WHERE "PRODUTO" = $1`, [row.PRODUTO]);
        
        if (result.rows.length > 0) {
          await pool.query(updateQuery, values);
        } else {
          await pool.query(insertQuery, values);
        }
      }
  
      res.json({ message: "Dados inseridos com sucesso!" });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });

// üìå ROTA: Buscar concorrentes por SKU
app.get('/api/concorrente/:sku', async (req, res) => {
    const { sku } = req.params;
    const cacheKey = `concorrente:${sku}`;

    try {
        const cachedData = await redis.get(cacheKey);
        if (cachedData) {
            console.log(`Cache hit para Concorrente SKU: ${sku}`);
            return res.json(JSON.parse(cachedData));
        }

        console.log(`Cache miss para Concorrente SKU: ${sku}, consultando o banco...`);
        const result = await pool.query(
            `SELECT 
                "PAGUEMENOS" as paguemenos, 
                "DROGARIASPACHECO" as drogariaspacheco, 
                "PANVEL" as panvel, 
                "BELEZANAWEB" as belezanaweb, 
                "EPOCACOSMETICOS" as epocacosmeticos, 
                "FARMACIASNISSEI" as farmaciasnissei, 
                "ULTRAFARMA" as ultrafarma, 
                "EXTRAFARMA" as extrafarma, 
                "AMAZON" as amazon, 
                "DROGARIAVENANCIO" as drogariavenancio, 
                "DROGARIASAOPAULO" as drogariasaopaulo, 
                "MAGAZINELUIZA" as magazineluiza, 
                "ARAUJO" as araujo 
            FROM "produtos" 
            WHERE "PRODUTO" = $1`, 
            [sku]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Produto n√£o encontrado' });
        }

        const concorrente = result.rows[0];

        await redis.setex(cacheKey, CACHE_EXPIRATION, JSON.stringify(concorrente));

        return res.json(concorrente);
    } catch (error) {
        console.error('Erro ao acessar o banco de dados:', error);
        res.status(500).send('Erro ao acessar o banco de dados');
    }
});

// üìå ROTA: Buscar informa√ß√µes por categoria
app.get('/api/categoria/:cat', async (req, res) => {
    const { cat } = req.params;
    const cacheKey = `categoria:${cat}`;

    try {
        const cachedData = await redis.get(cacheKey);
        if (cachedData) {
            console.log(`Cache hit para Categoria: ${cat}`);
            return res.json(JSON.parse(cachedData));
        }

        console.log(`Cache miss para Categoria: ${cat}, consultando o banco...`);
        const result = await pool.query(
            `SELECT 
                media_ic_atual_raia as media_ic_atual_site_loja_raia, 
                soma_rbv_l1m, 
                "media_ic_novo_raia_concorrente" as media_ic_novo_concorrente, 
                numero_produtos 
            FROM resumo_categoria_site 
            WHERE "categoria_site" = $1`, 
            [cat]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Categoria n√£o encontrada' });
        }

        const categoria = result.rows[0];

        await redis.setex(cacheKey, CACHE_EXPIRATION, JSON.stringify(categoria));

        return res.json(categoria);
    } catch (error) {
        console.error('Erro ao acessar o banco de dados:', error);
        res.status(500).send('Erro ao acessar o banco de dados');
    }
});

app.listen(port, () => {
    const ip = getLocalIP();
    console.log(`Servidor rodando em http://${ip}:${port}`);
});
